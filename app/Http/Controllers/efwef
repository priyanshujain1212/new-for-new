<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\File;
use GuzzleHttp\Client;
use Illuminate\Support\Facades\Log;


use App\Models\MasterStatus;
use App\Models\Store as StoreModel;
use App\Models\BillingCounter as BillingCounterModel;
use App\Models\StorePayment as StorePaymentModel;
use App\Models\PurchaseOrder as PurchaseOrderModel;
use App\Models\Country as CountryModel;
use App\Models\MasterStatus as MasterStatusModel;
use App\Models\MasterTaxOption as MasterTaxOptionModel;

use App\Http\Resources\PurchaseOrderResource;

use Mpdf\Mpdf;

class Payment extends Controller
{
    public function phonepePayment(Request $request, $slack)
{
    $purchaseOrder = PurchaseOrderModel::where('slack', $slack)->firstOrFail();
    $totalAmount = $purchaseOrder->total_order_amount * 100; // Convert to paise
    $orderId = $purchaseOrder->id;

    // Prepare PhonePe API URL and credentials
    $apiUrl = config('services.phonepe.api_url');
   
    $merchantId = config('services.phonepe.merchant_id');
    $saltKey = config('services.phonepe.salt_key');
    $callbackUrl = route('payment.callback', ['slack' => $purchaseOrder->slack]);

    // Create request payload
    $payload = [
        'merchantId' => $merchantId,
        'transactionId' => uniqid(),
        'amount' => $totalAmount,
        'merchantOrderId' => $orderId,
        'merchantUserId' => $purchaseOrder->customer_id,
        'callbackUrl' => $callbackUrl,
        'paymentInstrument' => [
            'type' => 'PHONEPE'
        ]
    ];
    Log::error('PhonePe payload: ' . json_encode($payload));
    // Convert payload to JSON and generate checksum
    
    $payloadJson = json_encode($payload);
    $hashedPayload = hash('sha256', $payloadJson . '/pg/v1/pay' . $saltKey); // Ensure endpoint matches

    // Initialize Guzzle Client
    $client = new Client();

    try {
        // Make the API request
        $response = $client->post($apiUrl, [
            'headers' => [
                'X-VERIFY' => $hashedPayload . '###' . $saltKey,
                'Content-Type' => 'application/json',
            ],
            'body' => $payloadJson
        ]);

        // Process response
        $responseData = json_decode($response->getBody(), true);
        if ($responseData['success']) {
            return redirect($responseData['data']['paymentUrl']);
        } else {
            return redirect()->back()->with('error', 'Failed to initiate payment: ' . $responseData['message']);
        }
    } catch (\GuzzleHttp\Exception\ClientException $e) {
        Log::error('PhonePe payment error: ' . $e->getMessage());
        // return redirect()->back()->with('error', 'An error occurred while processing payment: ' . $e->getMessage());
    }
}



    private function generateChecksum($payloadJson, $saltKey)
    {
    return hash('sha256', $payloadJson . '/pg/v1/pay' . $saltKey);
    }



    // Handle PhonePe callback after payment completion
    public function paymentCallback(Request $request, $slack)
    {
        
        // Process the callback data and update order status
        $purchaseOrder = PurchaseOrder::where('slack', $slack)->firstOrFail();
        // You will get transactionId and payment status here
        $transactionId = $request->input('transactionId');
        $paymentStatus = $request->input('status');

        if ($paymentStatus == 'SUCCESS') {
            // Mark order as paid
            $purchaseOrder->status = 'PAID';
            $purchaseOrder->save();

            // return redirect()->route('order.success', ['slack' => $purchaseOrder->slack]);
        } else {
            // return redirect()->route('order.failure', ['slack' => $purchaseOrder->slack]);
        }
    }

}
