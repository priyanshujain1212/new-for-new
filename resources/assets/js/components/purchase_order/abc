<template>
    <div class="row">
        <div class="col-md-12">
            <form @submit.prevent="submit_form" class="mb-3">

                <div class="d-flex flex-wrap mb-4">
                    <div class="mr-auto">
                        <span class="text-title" v-if="purchase_order_slack == ''">{{ ("Add New Rasid") }}</span>
                        <span class="text-title" v-else>{{ ("Edit Rasid ") }} </span>
                    </div>
                    <div class="">
                        <button type="submit" class="btn btn-primary" v-bind:disabled="processing == true"> <i class='fa fa-circle-notch fa-spin'  v-if="processing == true"></i> {{ ("Save") }}</button>
                    </div>
                </div>
                <p v-html="server_errors" v-bind:class="[error_class]"></p>
                <div class="form-row mb-2">
                    <div class="form-group col-md-3">
                        <label for="po_number">{{ ("Rasid Number") }}</label>
                        <div v-if="purchase_order_slack == ''">
                            <input type="text" name="po_number" v-model="po_number" v-validate="'required|max:50'" class="form-control form-control-custom" placeholder="Please enter Rasid Number">
                            <span v-if="errors && errors.po_number" class="error">{{ errors.po_number[0] }}</span>

                        <span :class="{ 'error': errors.has('Customer') }">{{ errors.first('Customer') }}</span></div>
                        <div v-else>
                            <div class="ml-2" style="font-size: 1.5rem" value = "po_number">
                                  <span for="po_number">{{ (po_number ) }}</span>
                            </div>
                        </div>
                    </div>
                    <div class="form-group col-md-3">
                        <label for="customer">{{ ("Customer") }}</label>
                        <div v-if="purchase_order_slack == ''">
                        <select-vue  type="text" name="customer" v-validate="'required|max:250'" :placeholder="('Please choose customer')" autocomplete="off" v-model="selectedCustomerslack" :items="formattedCustomerList" item-text="displayText" item-value="customer_code" @search="load_customers" ref="customer"></select-vue>
                        <span :class="{ 'error': errors.has('Customer') }">{{ errors.first('Customer') }}</span></div>
                        <div v-else>
                            <div class="ml-2" style="font-size: 1.5rem" value = "customer_code">
                                  <span for="customer">{{ (customer_code ) }}{{ (" - ") }}{{ (customer_name ) }}</span>
                            </div>

                        </div>
                    </div>
                    <div class="form-group col-md-3">
                        <label for="po_reference">{{ ("Reference Rasid Number (if any)") }}</label>
                        <input type="text" name="po_reference" v-model="po_reference" v-validate="'max:30'" class="form-control form-control-custom" :placeholder="('Reference Rasid Number')"  autocomplete="off">
                    </div>
                </div>
                <div class="form-row mb-2">
                    <div class="form-group col-md-3">
                        <label for="order_date">{{ (" Date") }}</label>
                        <DatePicker :format="date.format" :lang='date.lang' v-model="order_date" v-validate="'date_format:yyyy-MM-dd'" input-class="form-control form-control-custom  bg-white" ref="order_date" name="order_date" :placeholder="('Please enter rasid Date')" autocomplete="off"></DatePicker>
                        <span v-bind:class="{ 'error' : errors.has('date') }">{{ errors.first('date') }}</span> 
                    </div>
                    <div class="form-group col-md-3">
                        <label for="payment_type">{{ ("Payment Type") }}</label>
                        <div v-if="!purchase_order_slack">  <!-- Check if purchase_order_slack is empty -->
                            <select name="payment_type" v-model="payment_type" v-validate="'required|numeric'" class="form-control form-control-custom custom-select">
                                <option value="">Choose Status..</option>
                                <option v-for="(payment_item, index) in payment_types" :value="payment_item" :key="index">
                                    {{ payment_item }}
                                </option>
                            </select>
                            <span :class="{ 'error': errors.has('payment type') }">{{ errors.first('payment type') }}</span>
                        </div>
                        <div v-else>
                            <div class="ml-2" style="font-size: 1.5rem">
                                <span for="payment_type">{{ purchase_order_data['payment_type'] }}</span> <!-- Display the payment type from purchase_order -->
                            </div>
                        </div>
                    </div>

                </div>
                <div class="d-flex flex-wrap mb-1">
                    <div class="mr-auto">
                        <span class="text-subhead">{{ ("Particulars") }}</span>
                    </div>
                    <div class="">  
                    </div>
                </div>
                <div class="form-row mb-2">
                <div class="form-group col-md-4">
                    <label for="search_particular">{{ ("Search and Add Particulars") }}</label>
                    <select-vue  type="text" v-model="search_particular" autocomplete="off" inputForTextClass="form-control form-control-custom" :items="filtered_particulars" item-text="value" item-value="value" :resetSearchOnBlur="false" disable-filtering-by-search @search="filter_particulars" @select="add_particular_to_list" :placeholder="('Start Typing..')" ></select-vue>
                </div>
                </div>
                <div class="form-row">
                <div class="form-group col-md-6 mb-1">
                    <label for="name">{{ ("Particulars") }}</label>
                </div>
                <div class="form-group col-md-2 mb-1">
                    <label for="amount">{{ ("Amount") }}</label>
                </div>
                </div>
                <div class="form-row mb-2" v-for="(particular, index) in selected_particulars" :key="index">
                    <div class="form-group col-md-6">
                        <input
                            type="text" v-bind:name="'particular_'+index" v-model="particular.name" class="form-control form-control-custom" readonly />
                    </div>
                    <div class="mr">
                        <span class="text-subhead" style="font-size: 1.5rem;position: relative; top: 5px;">{{ currency_listString }}</span>
                    </div>
                    <div class="form-group col-md-2">
                        <input type="number"  v-bind:name="'amount_'+index"  v-model="particular.amount" :class="{'bg-success': !update_stock, 'bg-danger': update_stock}"  class="form-control form-control-custom" autocomplete="off"  step="0.01"  min="0" v-on:input="calculate_total"  v-if="particular.amount !== undefined">
                    </div>
                    <div class="form-group col-md-1">
                        <button
                            type="button" class="btn btn-outline-danger" @click="remove_particular(index)" >
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                </div>
                <div class="form-row mb-3">
                    <div class="form-group col-md-5"></div>
                    <div class="form-group col-md-1 text-right">
                        <label for="grand_total" style="position: relative; top: 5px;">{{ ("Grand Total") }}</label>
                    </div>
                    <div class="mr">
                        <span class="text-subhead" style="font-size: 1.5rem;position: relative; top: 5px;">{{ currency_listString }}</span>
                    </div>
                    <div class="form-group col-md-2">
                        <input type="text" name="grand_total" v-model="grand_total" :class="{'bg-success': !update_stock, 'bg-danger': update_stock}" class="form-control form-control-custom" readonly />
                    </div>
                    <div class="form-group col-md-2" style="position: relative; top: -7px;">
                        <label for="name">{{ ("Payment Status") }}</label>
                        <div class="d-flex align-items-center">
                            <div class="custom-control custom-switch" style="position: relative; top: -17px;">
                                <input type="checkbox" class="custom-control-input" id="update_stock_switch" v-model="update_stock" @change="toggleSwitch" style="transform: scale(1.3);">
                                <label class="custom-control-label" for="update_stock_switch"></label>
                            </div>
                            <span class="ml-2" style="font-size: 1rem;position: relative; top: -7px;">
                                Payment is <b>{{ update_stock ? 'Due' : 'Cleared' }}</b>.
                            </span>
                        </div>
                    </div>
                </div>
                <div class="form-row mb-2">
                    <div class="form-group col-md-6">
                        <label for="terms">{{ ("Terms") }}</label>
                        <textarea name="terms" v-model="terms" v-validate="'max:65535'" class="form-control form-control-custom" rows="5" :placeholder="('Enter Terms')"></textarea>
                        <span v-bind:class="{ 'error' : errors.has('terms') }">{{ errors.first('terms') }}</span>
                    </div>
                </div>
            </form>
        </div>
        <modalcomponent v-if="show_modal" v-on:close="show_modal = false">
            <template v-slot:modal-header>
                Confirm
            </template>
            <template v-slot:modal-body>
                Are you sure you want to proceed?
            </template>
            <template v-slot:modal-footer>
                <button type="button" class="btn btn-light" @click="$emit('close')">Cancel</button>
                <button type="button" class="btn btn-primary" @click="$emit('submit')" v-bind:disabled="processing == true"> <i class='fa fa-circle-notch fa-spin'  v-if="processing == true"></i> Continue</button>
            </template>
        </modalcomponent>
        
    </div>
</template>
<style>
.bg-success {
    background-color: #ffffff; /* Light green */
}

.bg-danger {
    background-color: #ffe8e9; /* Light red */
}</style>

<script>
    'use strict';
    import DatePicker from 'vue3-datepicker';
    import ModalComponent from '@components/commons/modal_component.vue';
    import SelectVue from 'vue3-select';

export default {
    components: {
        DatePicker,
        ModalComponent,
        SelectVue,
    },
        data(){
            return{
                date:{
                    lang : 'en',
                    format : "YYYY-MM-DD",
                },
                server_errors   : '',
                error_class     : '',
                errors:         {} ,
                processing      : false,
                modal           : false,
                show_modal      : false,
                api_link        : (this.purchase_order_data == null)?'/api/addrasid':'/api/update_purchase_order/'+this.purchase_order_data.slack,
                
                selectedCustomerslack: null,
                customer_list   : [],
                
                customer: (this.purchase_order_data == null) ? '' : (this.purchase_order_data.customer_code)?this.purchase_order_data.customer_code:'', // Customer slack
                customer_name: (this.purchase_order_data == null) ? '' : (this.purchase_order_data.customer_name)?this.purchase_order_data.customer_name:'',
                customer_code:(this.purchase_order_data ==null)? '' : (this.purchase_order_data.customer_code)?this.purchase_order_data.customer_code:'',

                purchase_order_slack : (this.purchase_order_data == null)?'':this.purchase_order_data.slack,
                po_number : (this.purchase_order_data == null)?'':(this.purchase_order_data.po_number)?this.purchase_order_data.po_number:'',
                po_reference : (this.purchase_order_data == null)?'':(this.purchase_order_data.po_reference != null)?this.purchase_order_data.po_reference:'',
                order_date : (this.purchase_order_data == null)?'':(this.purchase_order_data.order_date_raw != null)?new Date(this.purchase_order_data.order_date_raw):'',
                order_due_date : (this.purchase_order_data == null)?'':(this.purchase_order_data.order_due_date_raw != null)?new Date(this.purchase_order_data.order_due_date_raw):'',
                currency : (this.purchase_order_data == null)?'':(this.purchase_order_data.currency_code != null)?this.purchase_order_data.currency_code:'',
                update_stock : (this.purchase_order_data == null)?false:(this.purchase_order_data.update_stock != null)?((this.purchase_order_data.update_stock == 1)?true:false):false,
                terms : (this.purchase_order_data == null)?'':(this.purchase_order_data.terms != null)?this.purchase_order_data.terms:'',
                payment_type: (this.purchase_order_data == null)?'':(this.purchase_order_data.payment_type != null)?this.purchase_order_data.payment_type:'',
                grand_total : 0,

                search_particular: '',
                filtered_particulars: this.particulars.map(p => ({ value: p, name: p })),
                selected_particulars: [],
                grand_total: 0,

                particular_lists :(this.purchase_order_data != null)?this.purchase_order_data.products:[],
                particulars_template : {
                    name : '',
                    amount: 0
                },
                today : new Date(),
                
            }
        },

        props: {
            currency_list: Array,
            payment_types: Array,
            isEditMode: {
            type: Boolean,
            default: false
        },
            particulars: Array,
            purchase_order_data: [Array, Object],
            tax_options: [Array, Object],
        },

        watch: {
           
        },

        computed: {
            
        formattedCustomerList() {
            return this.customer_list.map(customer => ({
                ...customer,
                displayText: `${customer.name}`  // For display purposes
            }));
        },
        currency_listString() {
            return this.currency_list.join(', '); // Customize the separator as needed
        }
        
    },

        mounted() {
            console.log('Errors:', this.errors);

            console.log('Add purchase order page loaded');
            if (this.customer_name) {
            this.$refs.customer.setSearchData(this.customer_name);
        }
            this.load_customers('');
           
        },
        created() {
           
            if (this.purchase_order_data) {
                this.update_particular_list(this.particular_lists);
            } else {
                this.selected_particulars = [];
                this.grand_total = 0;
            }
        },
        methods: {
            toggleSwitch() {
            if (!this.update_stock) {
                this.update_stock = false; // Keep it closed
            } else {
                this.update_stock = true; // Allow it to become open
            }
        },
        load_customers(keywords) {
                    if (typeof keywords !== 'undefined') {
                        const formData = new FormData();
                        formData.append("access_token", window.settings.access_token);
                        formData.append("keywords", keywords);

                        axios.post('/api/load_customers', formData)
                        .then((response) => {
                            if (response.data.status_code === 200) {
                                this.customer_list = response.data.data;
                            }
                        })
                        .catch((error) => {
                            console.log(error);
                        });
                    }
                },
            convert_date_format(date){
                return (date != '')?moment(date).format("YYYY-MM-DD"):'';
            },

            not_before_order_date(date) {
                return date < this.order_date;
            },

            load_particulars(searchTerm) {
            // You can optionally handle the search query here, if needed
        },
        
            filter_particulars(query) {
                this.filtered_particulars = this.particulars
                    .filter(p => p.toLowerCase().includes(query.toLowerCase()))
                    .map(p => ({ value: p }));
            },

            add_particular_to_list(selected) {
                const newParticular = {
                    name: selected.value,
                    amount: 0 // Initialize with 0 amount
                };
                this.selected_particulars.push(newParticular);
                this.calculate_total(); // Recalculate the total
            },

            remove_particular(index) {
            this.selected_particulars.splice(index, 1);
            },
            calculate_total() {
                this.grand_total = this.selected_particulars.reduce((sum, particular) => {
                    const amount = parseFloat(particular.amount) || 0;
                    return sum + amount;
                }, 0).toFixed(2);
            },
            update_particular_list(purchase_order_products) {
                if(purchase_order_products != null && purchase_order_products.length > 0){
                    this.products = [];
                    for (let i = 0; i < purchase_order_products.length; i++) {
                        var individual_product = {
                            name: purchase_order_products[i].name,
                            amount: purchase_order_products[i].total_amount
                        };
                        this.selected_particulars.push(individual_product);
                    }
                } else {
                    this.selected_particulars = [];
                    this.selected_particulars.push(this.particulars_template);
                }
                this.calculate_total();
            },
            convertFormDataToObject(formData) {
            const obj = {};
            formData.forEach((value, key) => {
                obj[key] = value;
            });
            return obj;
        },
        submit_form() {
            console.log('Submit button pressed');
                this.$off("submit");
                this.$off("close");
                 
                            // Prepare form data
                            const formData = new FormData();
                            formData.append("access_token", window.settings.access_token);
                            formData.append("customer", this.purchase_order_data ==null ? this.selectedCustomerslack : this.purchase_order_data.customer_code);
                            formData.append("po_number", this.po_number || '');
                            formData.append("po_reference", this.po_reference || '');
                            formData.append("order_date", this.convert_date_format(this.order_date));
                            formData.append("currency", this.currency_listString || '');
                            formData.append("terms", this.terms);
                            formData.append("update_stock", this.update_stock ? 1 : 0);
                            formData.append("selected_particulars", JSON.stringify(this.selected_particulars));
                            formData.append("grand_total", this.grand_total);
                            formData.append("payment_type", this.payment_type);
                            // Log form data to console
                             console.log('Form Data:', this.convertFormDataToObject(formData));
                            // Show confirmation modal
                            this.show_modal = true;
                            this.$on("submit", () => {
                                this.processing = true;

                                // Send the form data to the server
                                axios.post(this.api_link, formData)
                                    .then((response) => {
                                        if (response.data.status_code === 200) {
                                            this.show_response_message(response.data.msg, 'SUCCESS');
                                            setTimeout(() => window.location.href = '/rasids', 1000);
                                        } else {
                                            this.show_modal = false;
                                            this.processing = false;
                                            try {
                                                const error_json = JSON.parse(response.data.msg);
                                                this.loop_api_errors(error_json);
                                            } catch (err) {
                                                this.server_errors = response.data.msg;
                                            }
                                            this.error_class = 'error';
                                        }
                                    })
                                    .catch((error) => {
                                        console.log(error);
                                    });
                            });
                            this.$on("close", () => {
                                this.show_modal = false;
                            });}, } }
</script>